# Development compose file.

version: '3.7'

services:
  db:
    image: postgres
    container_name: db
    restart: always
    ports:
      - 5432:5432
    environment:
      - POSTGRES_DB=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    volumes:
      - postgres-data:/var/lib/postgresql/data
  minio:
    image: minio/minio
    ports:
      - 9000:9000
      - 9001:9001
    volumes:
      - minio-data:/data
    environment:
      - MINIO_ACCESS_KEY=minio-access-key
      - MINIO_SECRET_KEY=minio-secret-key
    command: server /data --console-address :9001

  createbuckets:
    image: minio/mc
    depends_on:
      - minio
    environment:
      - MINIO_ACCESS_KEY=minio-access-key
      - MINIO_SECRET_KEY=minio-secret-key
      - BUCKET_NAME=localbucket
      - ENDPOINT=http://minio:9000
    entrypoint: >
        /bin/sh -c "
        sleep 2;
        /usr/bin/mc config host add minio http://minio:9000 minio-access-key minio-secret-key;
        /usr/bin/mc alias set minio http://minio:9000 minio-access-key minio-secret-key;
        /usr/bin/mc admin user add minio local-dev local-dev;
        /usr/bin/mc mb minio/localbucket;
        /usr/bin/mc anonymous set public minio/localbucket;
        exit 0;
        "
  backend:
    depends_on:
      - db
      - minio
      - createbuckets
      - migrations
      - kafka
    build:
      context: .
      dockerfile: docker_iternal/backend.Dockerfile
    ports:
      - 8000:8000
    environment:
      - MINIO_ENDPOINT=http://minio:9000
      - MINIO_ACCESS_KEY=minio-access-key
      - MINIO_SECRET_KEY=minio-secret-key
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_HOST=db
      - POSTGRES_PORT=5432
      - POSTGRES_NAME=postgres
      - KAFKA_BROKERS=kafka:29092
  migrations:
    depends_on:
      - db
      - minio
    build:
      context: .
      dockerfile: docker_iternal/migrations.Dockerfile
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_HOST=db
      - POSTGRES_PORT=5432
      - POSTGRES_NAME=postgres

  ml-worker:
    depends_on:
      - minio
    build:
      context: .
      dockerfile: docker_iternal/ml-worker.Dockerfile
    environment:
      - MINIO_ENDPOINT=http://minio:9000
      - MINIO_ACCESS_KEY=minio-access-key
      - MINIO_SECRET_KEY=minio-secret-key
      - KAFKA_BROKERS=kafka:29092
      - BACKEND_HOST=backend
      - BACKEND_PORT=8000
  zookeeper:
    image: bitnami/zookeeper:latest
    restart: on-failure
    ports:
      - "2181:2181"
    environment:
      ZOO_MY_ID: 1
      ZOO_PORT: 2181
      ZOO_SERVERS: server.1=zookeeper:2888:3888
      ALLOW_ANONYMOUS_LOGIN: "yes"

  kafka:
    image: bitnami/kafka:latest
    restart: on-failure
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:29092,EXTERNAL://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_LOG4J_LOGGERS: "kafka.controller=DEBUG,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CFG_ZOOKEEPER_CONNECT: zookeeper:2181
      ALLOW_PLAINTEXT_LISTENER: "yes"
      KAFKA_LISTENERS: "INTERNAL://:29092,EXTERNAL://:9092"
      KAFKA_ZOOKEEPER_SESSION_TIMEOUT: "6000"
      KAFKA_RESTART_ATTEMPTS: "10"
      KAFKA_RESTART_DELAY: "5"
      ZOOKEEPER_AUTOPURGE_PURGE_INTERVAL: "0"
    depends_on:
      - zookeeper

  kowl:
    image: quay.io/cloudhut/kowl:v1.4.0
    restart: on-failure
    volumes:
    - ./kowl_config:/etc/kowl/
    ports:
    - "8080:8080"
    entrypoint: ./kowl --config.filepath=/etc/kowl/config.yaml
    depends_on:
      - kafka
volumes:
  minio-data:
    driver: local
  postgres-data:
    driver: local
